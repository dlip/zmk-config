/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// GENERAL KEYS
#define GEN_NONE &none
#define GEN_TRAN &trans

// DEFAULT LAYER

#define L_DEF 0

#define DEF_Q &kp Q
#define DEF_W &kp W
#define DEF_F &kp F
#define DEF_P &kp P
#define DEF_B &kp B
                        
#define DEF_J &kp J
#define DEF_L &kp L
#define DEF_U &kp U
#define DEF_Y &kp Y
#define DEF_SEMI &kp SEMI

#define DEF_A &mt LGUI A 
#define DEF_R &mt LALT R 
#define DEF_S &kp S
#define DEF_T &mt LCTRL T 
#define DEF_G &kp G
        
#define DEF_M &kp M
#define DEF_N &mt RCTL N 
#define DEF_E &lt L_MED E
#define DEF_I &mt LALT I 
#define DEF_O &mt RGUI O
        
#define DEF_Z &kp Z
#define DEF_X &kp X
#define DEF_C &kp C
#define DEF_D &kp D
#define DEF_V &kp V
                        
#define DEF_K &kp K
#define DEF_H &kp H
#define DEF_C &kp C
#define DEF_COMA &kp COMMA
#define DEF_DOT &kp DOT

#define DEF_BSPC &kp BSPC
#define DEF_SPC &mt LSHIFT SPC
#define DEF_RET &kp RET

// NAVIGATION LAYER
#define L_NAV 1

#define NAV_PRNT &kp PSCRN
#define NAV_HOME &kp HOME
#define NAV_UP &kp UP
#define NAV_END &kp END
#define NAV_ESC &kp ESC
#define NAV_LEFT &kp LEFT
#define NAV_DOWN &kp DOWN
#define NAV_RGHT &kp RIGHT
#define NAV_GRV &kp GRAVE
#define NAV_PGUP &kp PG_UP
#define NAV_DEL &kp DEL
#define NAV_PGDN &kp PG_DN

// NUMBER LAYER
#define L_NUM 2

// MEDIA LAYER
#define L_MED 3

// FUNCTION LAYER
#define L_FUN 4

// GAMING LAYER
#define L_GAM 5

&mt {
  //  flavor = "tap-preferred";
  tapping_term_ms = <200>;
};

/ {

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        DEF_Q    DEF_W    DEF_F    DEF_P    DEF_B          DEF_J    DEF_L    DEF_U    DEF_Y    DEF_SEMI
        DEF_A    DEF_R    DEF_S    DEF_T    DEF_G          DEF_M    DEF_N    DEF_E    DEF_I    DEF_O
        DEF_Z    DEF_X    DEF_C    DEF_D    DEF_V          DEF_K    DEF_H    DEF_C    DEF_COMA DEF_DOT
                                   DEF_BSPC DEF_SPC        DEF_SPC  DEF_RET
      >;
    };


    navigation_layer {
      bindings = <
        NAV_PRNT NAV_HOME NAV_UP   NAV_END  GEN_NONE       GEN_NONE GEN_NONE GEN_NONE GEN_NONE GEN_NONE
        NAV_ESC  NAV_LEFT NAV_DOWN NAV_RGHT GEN_NONE       GEN_NONE GEN_NONE GEN_NONE GEN_NONE GEN_NONE
        NAV_GRV  NAV_PGUP NAV_DEL  NAV_PGDN GEN_NONE       GEN_NONE GEN_NONE GEN_NONE GEN_NONE GEN_NONE
                                   GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN
      >;
    };

    // empty_layer {
    //   bindings = <
    //     GEN_NONE GEN_NONE GEN_NONE GEN_NONE GEN_NONE       GEN_NONE GEN_NONE GEN_NONE GEN_NONE GEN_NONE
    //     GEN_NONE GEN_NONE GEN_NONE GEN_NONE GEN_NONE       GEN_NONE GEN_NONE GEN_NONE GEN_NONE GEN_NONE
    //     GEN_NONE GEN_NONE GEN_NONE GEN_NONE GEN_NONE       GEN_NONE GEN_NONE GEN_NONE GEN_NONE GEN_NONE
    //                                GEN_TRAN GEN_TRAN       GEN_TRAN GEN_TRAN
    //   >;
    // };

    // nav_layer {
    //   bindings =
    //       <&kp NUM_1 &kp NUM_2 &kp NUM_3 &kp NUM_4 &kp NUM_5 &kp NUM_6 &
    //        kp NUM_7 &kp NUM_8 &kp NUM_9 &kp NUM_0 &kp TAB &kp LC(S) &
    //        kp DQT &kp PIPE2 &kp HASH &kp MINUS &kp EQL &kp LBKT &kp RBKT &
    //        kp DEL &kp ESC &kp TILDE &kp NON_US_BSLH &kp NON_US_HASH &
    //        kp TILDE2 &kp MINUS &kp GRAVE &kp LBKT &kp RBKT &kp DEL &mo 1 &
    //        kp LGUI &kp RGUI &mo 2>;
    // };
    //
    // num_layer {
    //   bindings = <&kp BANG &kp ATSN &kp HASH &kp DLLR &kp PRCT &kp CRRT &
    //               kp AMPS &kp KMLT &kp LPRN &kp RPRN &kp HASH &kp QMARK &
    //               kp FSLH &kp COLN &kp SCLN &kp MINUS &kp KP_EQUAL &
    //               kp LBRC &kp RBRC &kp BKSP &kp LSFT &kp KPLS &kp LBKT &
    //               kp RBKT &kp BSLH &kp UNDER &kp LEFT &kp DOWN &kp UP &
    //               kp RIGHT &mo 3 &kp LCTL &kp SPC &mo 2>;
    // };
    //
    // med_layer {
    //   bindings = <&kp NUM_1 &kp NUM_2 &kp NUM_3 &kp NUM_4 &kp NUM_5 &
    //               trans &trans &trans &trans &trans &kp F1 &kp F2 &
    //              kp F3 &kp F4 &kp F5 &trans &kp PG_UP &kp DEF_VOL_UP &
    //               kp DEF_MUTE &trans &bt BT_CLR &bt BT_NXT &bt BT_PRV &
    //               kp F6 &kp F7 &trans &kp PG_DN &kp DEF_VOL_DN &trans &
    //               trans &trans &trans &trans &trans>;
    // };
    //
    // fun_layer {
    //   bindings = <&kp NUM_1 &kp NUM_2 &kp NUM_3 &kp NUM_4 &kp NUM_5 &
    //               trans &trans &trans &trans &trans &kp F1 &kp F2 &
    //               kp F3 &kp F4 &kp F5 &trans &kp PG_UP &kp DEF_VOL_UP &
    //               kp DEF_MUTE &trans &bt BT_CLR &bt BT_NXT &bt BT_PRV &
    //               kp F6 &kp F7 &trans &kp PG_DN &kp DEF_VOL_DN &trans &
    //               trans &trans &trans &trans &trans>;
    // };
    //
    // gam_layer {
    //   bindings = <&kp NUM_1 &kp NUM_2 &kp NUM_3 &kp NUM_4 &kp NUM_5 &
    //               trans &trans &trans &trans &trans &kp F1 &kp F2 &
    //               kp F3 &kp F4 &kp F5 &trans &kp PG_UP &kp DEF_VOL_UP &
    //               kp DEF_MUTE &trans &bt BT_CLR &bt BT_NXT &bt BT_PRV &
    //               kp F6 &kp F7 &trans &kp PG_DN &kp DEF_VOL_DN &trans &
    //               trans &trans &trans &trans &trans>;
    // };
  };
};
