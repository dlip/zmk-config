/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define L_DEF 0
#define L_NAV 1
#define L_NUM 2
#define L_MED 3
#define L_FUN 4
#define L_GAM 5

#define K_BSPC &kp BSPC

&mt {
  //  flavor = "tap-preferred";
  tapping_term_ms = <200>;
};

/ {

  keymap {
    compatible = "zmk,keymap";

    def_layer {
      bindings = <
        &kp Q &kp W &kp F &kp P &kp B                        &kp J &kp U &kp U &kp O &kp SEMI 
        &mt LGUI A &mt LALT R &kp S &mt LCTRL T &kp G        &kp M &mt RCTL N &kp E &mt LALT I &mt RGUI O
        &kp Z &kp X &kp C &kp D &kp V                        &kp K &kp H &kp CMMA &kp DOT &kp QUOT
                  K_BSPC &mt LSHIFT SPC &mt                LSHIFT SPC &kp RET
      >;
    };

    // nav_layer {
    //   bindings =
    //       <&kp NUM_1 &kp NUM_2 &kp NUM_3 &kp NUM_4 &kp NUM_5 &kp NUM_6 &
    //        kp NUM_7 &kp NUM_8 &kp NUM_9 &kp NUM_0 &kp TAB &kp LC(S) &
    //        kp DQT &kp PIPE2 &kp HASH &kp MINUS &kp EQL &kp LBKT &kp RBKT &
    //        kp DEL &kp ESC &kp TILDE &kp NON_US_BSLH &kp NON_US_HASH &
    //        kp TILDE2 &kp MINUS &kp GRAVE &kp LBKT &kp RBKT &kp DEL &mo 1 &
    //        kp LGUI &kp RGUI &mo 2>;
    // };
    //
    // num_layer {
    //   bindings = <&kp BANG &kp ATSN &kp HASH &kp DLLR &kp PRCT &kp CRRT &
    //               kp AMPS &kp KMLT &kp LPRN &kp RPRN &kp HASH &kp QMARK &
    //               kp FSLH &kp COLN &kp SCLN &kp MINUS &kp KP_EQUAL &
    //               kp LBRC &kp RBRC &kp BKSP &kp LSFT &kp KPLS &kp LBKT &
    //               kp RBKT &kp BSLH &kp UNDER &kp LEFT &kp DOWN &kp UP &
    //               kp RIGHT &mo 3 &kp LCTL &kp SPC &mo 2>;
    // };
    //
    // med_layer {
    //   bindings = <&kp NUM_1 &kp NUM_2 &kp NUM_3 &kp NUM_4 &kp NUM_5 &
    //               trans &trans &trans &trans &trans &kp F1 &kp F2 &
    //              kp F3 &kp F4 &kp F5 &trans &kp PG_UP &kp K_VOL_UP &
    //               kp K_MUTE &trans &bt BT_CLR &bt BT_NXT &bt BT_PRV &
    //               kp F6 &kp F7 &trans &kp PG_DN &kp K_VOL_DN &trans &
    //               trans &trans &trans &trans &trans>;
    // };
    //
    // fun_layer {
    //   bindings = <&kp NUM_1 &kp NUM_2 &kp NUM_3 &kp NUM_4 &kp NUM_5 &
    //               trans &trans &trans &trans &trans &kp F1 &kp F2 &
    //               kp F3 &kp F4 &kp F5 &trans &kp PG_UP &kp K_VOL_UP &
    //               kp K_MUTE &trans &bt BT_CLR &bt BT_NXT &bt BT_PRV &
    //               kp F6 &kp F7 &trans &kp PG_DN &kp K_VOL_DN &trans &
    //               trans &trans &trans &trans &trans>;
    // };
    //
    // gam_layer {
    //   bindings = <&kp NUM_1 &kp NUM_2 &kp NUM_3 &kp NUM_4 &kp NUM_5 &
    //               trans &trans &trans &trans &trans &kp F1 &kp F2 &
    //               kp F3 &kp F4 &kp F5 &trans &kp PG_UP &kp K_VOL_UP &
    //               kp K_MUTE &trans &bt BT_CLR &bt BT_NXT &bt BT_PRV &
    //               kp F6 &kp F7 &trans &kp PG_DN &kp K_VOL_DN &trans &
    //               trans &trans &trans &trans &trans>;
    // };
  };
};
